package com.whj.generate.model.condition;

/**
 * 逻辑运算符类型
 * @author whj
 * @date 2025-03-01 上午12:31
 */
enum LogicalOperatorEnum {
    /**
     * 或
     */
    OR("||", "或操作符"),
    /**
     * 且
     */
    AND("&&","且操作符"),
    /**
     * 二进制或
     */
    BINARY_OR("|","二进制或操作符" ),
    /**
     * 二进制且
     */
    BINARY_AND("&","二进制且操作符"),
    /**
     * 异或
     */
    XOR("^", "异或操作符"),
    /**
     * 等于
     */
    EQUALS("==", "等于操作符"),
    /**
     * 不等于
    /**
     * 不等于操作符
     * 表示两个值不相等
     */
    NOT_EQUALS("!=", "不等于操作符"),
    /**
     * 小于操作符
     * 表示左侧的值小于右侧的值
     */
    LESS("<", "小于操作符"),
    /**
     * 大于操作符
     * 表示左侧的值大于右侧的值
     */
    GREATER(">","大于操作符"),
    /**
     * 小于等于操作符
     * 表示左侧的值小于或等于右侧的值
     */
    LESS_EQUALS("<=", "小于等于操作符"),
    /**
     * 大于等于操作符
     * 表示左侧的值大于或等于右侧的值
     */
    GREATER_EQUALS(">=","大于等于操作符"),
    /**
     * 左移操作符
     * 表示将左侧操作数的二进制表示向左移动指定的位数
     */
    LEFT_SHIFT("<<", "左移操作符"),
    /**
     * 有符号右移操作符
     * 表示将左侧操作数的二进制表示向右移动指定的位数，左侧用符号位填充
     */
    SIGNED_RIGHT_SHIFT(">>","有符号右移操作符"),
    /**
     * 无符号右移操作符
     * 表示将左侧操作数的二进制表示向右移动指定的位数，左侧用零填充
     */
    UNSIGNED_RIGHT_SHIFT(">>>","无符号右移操作符"),
    /**
     * 加法操作符
     * 表示将两个值相加
     */
    PLUS("+","加法操作符"),
    /**
     * 减法操作符
     * 表示将右侧的值从左侧的值中减去
     */
    MINUS("-","减法操作符"),
    /**
     * 乘法操作符
     * 表示将两个值相乘
     */
    MULTIPLY("*","乘法操作符"),
    /**
     * 除法操作符
     * 表示将左侧的值除以右侧的值
     */
    DIVIDE("/","除法操作符"),
    /**
     * 取余操作符
     * 表示左侧的值除以右侧的值后的余数
     */
    REMAINDER("%","取余操作符");

    /**
     * 运算符
     */
    String op;
    /**
     * 描述
     */
    String desc;
    LogicalOperatorEnum(String op,String desc) {
        this.op = op;
        this.desc = desc;
    }
}
